name: VS Code Extension Release

on:
  push:
    branches:
      - main  # or your default branch name
    paths:
      - 'package.json'

jobs:
  check-version-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}  # Use PAT for checkout

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Using Node.js 20.x

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Get latest release version
        id: latest_release
        run: |
          latest=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "version=$latest" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare_versions
        run: |
          current="${{ steps.current_version.outputs.version }}"
          latest="${{ steps.latest_release.outputs.version }}"
          # Remove 'v' prefix if present
          latest_without_v="${latest#v}"
          if [ "$(printf '%s\n' "$latest_without_v" "$current" | sort -V | tail -n1)" = "$current" ] && [ "$current" != "$latest_without_v" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Build VSIX package
        if: steps.compare_versions.outputs.should_release == 'true'
        run: npx vsce package

      - name: Get VSIX filename
        if: steps.compare_versions.outputs.should_release == 'true'
        id: vsix_filename
        run: echo "filename=$(ls *.vsix)" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.compare_versions.outputs.should_release == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Use PAT for creating release
        with:
          tag_name: v${{ steps.current_version.outputs.version }}
          release_name: Release v${{ steps.current_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload VSIX to Release
        if: steps.compare_versions.outputs.should_release == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Use PAT for uploading asset
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.vsix_filename.outputs.filename }}
          asset_name: ${{ steps.vsix_filename.outputs.filename }}
          asset_content_type: application/octet-stream

      - name: Commit VSIX to repository
        if: steps.compare_versions.outputs.should_release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add *.vsix
          git commit -m "Add VSIX package for version ${{ steps.current_version.outputs.version }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Use PAT for pushing changes
